openapi: 3.0.0
info:
  title: GoX API
  version: 1.0.0
  description: API for managing cars in the GoX car rental system.

paths:
  /cars:
    get:
      summary: Retrieve a list of cars
      operationId: getCars
      tags:
        - Car
      responses:
        '200':
          description: A list of cars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
    post:
      summary: Create a new car
      operationId: createCar
      tags:
        - Car
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '201':
          description: Car successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
  /users:
    get:
      summary: Retrieve all users
      operationId: getUsers
      tags:
        - User
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'


components:
  schemas:
    Car:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the car.
        brand:
          type: string
          description: Brand of the car.
        model:
          type: string
          description: Model of the car.
        year:
          type: integer
          description: Production year of the car.
        seats:
          type: integer
          description: Number of seats in the car.
        state:
          $ref: '#/components/schemas/CarState'
        pricePerDay:
          type: number
          format: double
          description: Rental price per day.
        description:
          type: string
          description: Optional description of the car.

    CarState:
      type: string
      description: The current state of the car.
      enum:
        - AVAILABLE
        - RENTED
        - UNAVAILABLE
        - IN_TRANSIT
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the user.
        name:
          type: string
          description: Full name of the user.
        email:
          type: string
          format: email
          description: Unique email of the user.
        role:
          $ref: '#/components/schemas/UserRole'
        loyaltyLevel:
          $ref: '#/components/schemas/LoyaltyLevel'
        address:
          type: string
          description: Postal address of the user.
        phone:
          type: string
          description: Phone number of the user.
    UserShort:
      type: object
      description: A lightweight user model for authentication and security contexts.
      properties:
        email:
          type: string
          format: email
          description: User's email used for login.
        name:
          type: string
          description: Full name of the user.
        role:
          $ref: '#/components/schemas/UserRole'
    UserRole:
      type: string
      enum:
        - ADMIN
        - CUSTOMER
      description: Role of the user within the system.

    LoyaltyLevel:
      type: string
      enum:
        - STANDARD
        - SILVER
        - GOLD
      description: Loyalty level of the user.
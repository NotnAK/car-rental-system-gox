openapi: 3.0.0
info:
  title: GoX API
  version: 1.0.0
  description: API for managing cars in the GoX car rental system.
servers:
  - url: http://localhost:8080/api

paths:
  /cars:
    get:
      summary: Retrieve a list of cars, with optional filtering
      operationId: getCars
      tags:
        - Car
      parameters:
        - in: query
          name: filter
          style: deepObject
          explode: true
          schema:
            $ref: '#/components/schemas/CarFilterRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        '500':
          description: Internal Server Error
    post:
      summary: Create a new car
      operationId: createCar
      tags:
        - Car
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /cars/filters:
    get:
      summary: Get available filter options for cars
      operationId: getCarFilterOptions
      tags:
        - Car
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarFilterOptions'
        '500':
          description: Internal Server Error
  /cars/{carId}:
    get:
      summary: Get a specific car by ID
      operationId: getCarById
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update a car
      operationId: updateCar
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '403':
          description: Forbidden
    delete:
      summary: Delete a car
      operationId: deleteCar
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /cars/{carId}/reviews:
    get:
      summary: Get all reviews for a car
      operationId: getReviewsForCar
      tags:
        - Review
      parameters:
        - name: carId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      summary: Create a review by the current user
      operationId: createReview
      tags:
        - Review
      parameters:
        - name: carId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreateRequest'
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /cars/{carId}/photos:
    post:
      summary: Upload photo for a car
      operationId: uploadPhoto        # теперь будет в CarsApi
      tags: [ Photo ]
      parameters:
        - name: carId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PhotoCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error
  /cars/{carId}/busy-intervals:
    get:
      summary: Get occupied intervals for this car
      operationId: getBusyIntervals
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingInterval'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /photos/{photoId}:
    get:
      summary: Get raw bytes of a photo
      operationId: getPhotoContent
      tags:
        - Photo
      parameters:
        - name: photoId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a photo
      operationId: deletePhoto
      tags:
        - Photo
      parameters:
        - name: photoId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

    patch:
      summary: Update photo metadata
      operationId: updatePhoto
      tags:
        - Photo
      parameters:
        - name: photoId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhotoUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /users:
    get:
      summary: Retrieve all users
      operationId: getUsers
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSummary'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error

  /users/{userId}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSummary'
        '404':
          description: Not Found
        '403':
          description: Forbidden
    put:
      summary: Update a user by ID
      operationId: updateUserById
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAdminUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSummary'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete a user by ID
      operationId: deleteUser
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /users/{userId}/bookings:
    get:
      summary: Get all bookings for a given user
      operationId: getBookingsByUserId
      tags:
        - Booking
      parameters:
        - name: userId
          in: path
          description: ID of the user whose bookings to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingSummary'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /users/{userId}/reviews:
    get:
      summary: Get all reviews by a given user
      operationId: getReviewsByUserId
      tags:
        - Review
      parameters:
        - name: userId
          in: path
          description: ID of the user whose reviews to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /users/me:
    get:
      summary: Get own profile
      operationId: getProfile
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    put:
      summary: Update own profile
      operationId: updateProfile
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /users/me/wishlist:
    get:
      summary: Get all car-IDs in the current user's Wishlist
      operationId: getWishlistCarIds
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int64
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /users/me/wishlist/{carId}:
    post:
      summary: Add a car to the current user's Wishlist
      operationId: addCarToWishlist
      tags:
        - User
      parameters:
        - name: carId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Remove a car from the current user's Wishlist
      operationId: removeCarFromWishlist
      tags:
        - User
      parameters:
        - name: carId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /users/me/reviews:
    get:
      summary: Get all reviews by the current user
      operationId: getOwnReviews
      tags:
        - Review
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /users/me/bookings:
    get:
      summary: Get all bookings for current user
      operationId: getOwnBookings
      tags:
        - User
        - Booking
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingSummary'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /reviews:
    get:
      summary: Get all reviews
      operationId: getAllReviews
      tags:
        - Review
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /reviews/{reviewId}:
    put:
      summary: Update a review by the current user
      operationId: updateReview
      tags:
        - Review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete a review by the current user or Admin
      operationId: deleteReview
      tags:
        - Review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /locations:
    get:
      summary: Get all locations
      operationId: getLocations
      tags:
        - Location
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        '500':
          description: Internal Server Error
    post:
      summary: Create a location
      operationId: createLocation
      tags:
        - Location
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error

  /locations/{locationId}:
    get:
      summary: Get a location by id
      operationId: getLocationById
      tags:
        - Location
      parameters:
        - name: locationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      summary: Update a location
      operationId: updateLocation
      tags:
        - Location
      parameters:
        - name: locationId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete a location
      operationId: deleteLocation
      tags:
        - Location
      parameters:
        - name: locationId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /bookings:
    post:
      summary: Create a new booking
      operationId: createBooking
      tags:
        - Booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingSummary'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
    get:
      summary: Get all bookings
      operationId: getAllBookings
      tags:
        - Booking
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingSummary'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error

  /bookings/{bookingId}:
    parameters:
      - name: bookingId
        in: path
        required: true
        schema:
          type: integer
          format: int64

    get:
      summary: Get booking by ID
      operationId: getBookingById
      tags:
        - Booking
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDetail'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete a booking
      operationId: deleteBooking
      tags:
        - Booking
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /bookings/{bookingId}/approve:
    post:
      summary: Admin confirms reservation
      operationId: approveBooking
      tags: [ Booking ]
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /bookings/{bookingId}/cancel:
    post:
      summary: Admin/client cancels the reservation
      operationId: cancelBooking
      tags: [ Booking ]
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

  /bookings/{bookingId}/complete:
    post:
      summary: Complete a booking, set actual return date, calculate penalty
      operationId: completeBooking
      tags:
        - Booking
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - actualReturnDate
              properties:
                actualReturnDate:
                  type: string
                  format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingSummary'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /bookings/estimate:
    post:
      summary: Estimate cost of a booking without creating
      operationId: estimateBooking
      tags:
        - Booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingCreateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingEstimate'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error



components:
  schemas:
    Car:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the car.
        brand:
          type: string
          description: Brand of the car.
        model:
          type: string
          description: Model of the car.
        year:
          type: integer
          description: Production year of the car.
        seats:
          type: integer
          description: Number of seats in the car.
        pricePerDay:
          type: number
          format: double
          description: Rental price per day.
        state:
          $ref: '#/components/schemas/CarState'
        category:
          $ref: '#/components/schemas/CarCategory'
        transmission:
          $ref: '#/components/schemas/TransmissionType'
        fuelType:
          $ref: '#/components/schemas/FuelType'
        description:
          type: string
          description: Optional description of the car.
        preview:
          $ref: '#/components/schemas/Photo'
        photos:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
        location:
          $ref: '#/components/schemas/Location'

    CarState:
      type: string
      description: The current state of the car.
      enum:
        - AVAILABLE
        - RENTED
        - UNAVAILABLE
        - IN_TRANSIT
    CarCategory:
      type: string
      enum:
        - SEDAN
        - SUV
        - HATCHBACK
        - COUPE
        - WAGON
        - CROSSOVER
        - SPORT
        - CABRIOLET
        - MUV
    CarFilterRequest:
      type: object
      properties:
        brand:
          type: string
        year:
          type: integer
          format: int32
        priceMin:
          type: number
          format: double
        priceMax:
          type: number
          format: double
        category:
          $ref: '#/components/schemas/CarCategory'
        seats:
          type: integer
          format: int32
        transmission:
          $ref: '#/components/schemas/TransmissionType'
        fuelType:
          $ref: '#/components/schemas/FuelType'
        sortBy:
         type: string
         description: one of brand, model, year, pricePerDay
         default: brand
        sortDir:
         type: string
         description: asc or desc
         default: asc
    TransmissionType:
      type: string
      enum:
        - MANUAL
        - AUTOMATIC

    FuelType:
      type: string
      enum:
        - PETROL
        - DIESEL
        - ELECTRIC
        - HYBRID
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the user.
        username:
          type: string
          description: Login user name
        name:
          type: string
          description: Full name of the user.
        email:
          type: string
          format: email
          description: Unique email of the user.
        role:
          $ref: '#/components/schemas/UserRole'
        loyaltyLevel:
          $ref: '#/components/schemas/LoyaltyLevel'
        address:
          type: string
          description: Postal address of the user.
        phone:
          type: string
          description: Phone number of the user.
        wishlist:
          $ref: '#/components/schemas/Wishlist'
    UserSummary:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        role:
          $ref: '#/components/schemas/UserRole'
        loyaltyLevel:
          $ref: '#/components/schemas/LoyaltyLevel'
        address:
          type: string
        phone:
          type: string
    UserShort:
      type: object
      description: A lightweight user model for authentication and security contexts.
      properties:
        username:
          type: string
          description: Login user name
        email:
          type: string
          format: email
          description: User's email used for login.
        name:
          type: string
          description: Full name of the user.
        role:
          $ref: '#/components/schemas/UserRole'
        address:
          type: string
          description: Postal address of the user.
        phone:
          type: string
          description: Phone number of the user.
    UserRole:
      type: string
      enum:
        - ADMIN
        - CUSTOMER
      description: Role of the user within the system.
    UserUpdateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Full name of the user.
        phone:
          type: string
          description: Phone number of the user.
        address:
          type: string
          description: Postal address of the user.
    UserAdminUpdateRequest:
      type: object
      required:
        - name
        - phone
        - address
        - loyaltyLevel
      properties:
        name:
          type: string
        phone:
          type: string
        address:
          type: string
        loyaltyLevel:
          type: string
          description: One of STANDARD, SILVER, GOLD

    LoyaltyLevel:
      type: string
      enum:
        - STANDARD
        - SILVER
        - GOLD
      description: Loyalty level of the user.
    Wishlist:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique Wishlist ID.
        cars:
          type: array
          items:
            $ref: '#/components/schemas/Car'
      description: User's Wishlist with selected cars.
    Review:
      type: object
      properties:
        id:
          type: integer
        rating:
          type: integer
        comment:
          type: string
        userId:
          type: integer
        userName:
          type: string
          description: Name of the user who wrote the review.
        carId:
          type: integer
        carBrand:
          type: string
        carModel:
          type: string
        createdAt:
          type: string
          format: date-time
          description: Date and time when the review was created.
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the review was updated.

    ReviewCreateRequest:
      type: object
      required:
        - rating
        - comment
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string

    ReviewUpdateRequest:
      type: object
      required:
        - rating
        - comment
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
    Photo:
      type: object
      properties:
        id: { type: integer, format: int64 }
        name: { type: string }
        isPreview: { type: boolean }
        url:
          type: string
          description: URL to download raw content of this photo
    PhotoCreateRequest:
      type: object
      properties:
        name:
          type: string
        isPreview:
          type: boolean
        file:
          type: string
          format: binary

    Location:
      type: object
      properties:
        id:
          type: integer
          format: int64
        city:
          type: string
        street:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    BookingSummary:
      type: object
      properties:
        id:
          type: integer
          format: int64
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        actualReturnDate:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/BookingStatus'
        carId:
          type: integer
          format: int64
        carBrand:
          type: string
        carModel:
          type: string
        userId:
          type: integer
          format: int64
        userName:
          type: string
    BookingDetail:
      type: object
      properties:
        id:
          type: integer
          format: int64
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        actualReturnDate:
          type: string
          format: date-time
          nullable: true
        basePrice:
          type: number
          format: double
        loyaltyDiscount:
          type: number
          format: double
        discountedPrice:
          type: number
          format: double
        totalPrice:
          type: number
          format: double
        transferFee:
          type: number
          format: double
        urgent:
          type: boolean
        penalty:
          type: number
          format: double
        status:
          $ref: '#/components/schemas/BookingStatus'
        user:
          $ref: '#/components/schemas/UserSummary'
        car:
          $ref: '#/components/schemas/Car'
        pickupLocation:
          $ref: '#/components/schemas/Location'
        dropoffLocation:
          $ref: '#/components/schemas/Location'
    BookingCreateRequest:
      type: object
      required:
        - startDate
        - endDate
        - carId
        - pickupLocationId
        - dropoffLocationId
      properties:
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        carId:
          type: integer
          format: int64
        pickupLocationId:
          type: integer
          format: int64
        dropoffLocationId:
          type: integer
          format: int64

    BookingStatus:
      type: string
      enum:
        - PENDING
        - APPROVED
        - CANCELLED
        - COMPLETED
      description: Status of a Booking
    BookingEstimate:
      type: object
      properties:
        days:
          type: integer
        basePrice:
          type: number
          format: double
        loyaltyDiscount:
          type: number
          format: double
        discountedPrice:
          type: number
          format: double
        urgent:
          type: boolean
        transferFee:
          type: number
          format: double
        totalPrice:
          type: number
          format: double
    BookingInterval:
      type: object
      properties:
        start:
          type: string
          format: date-time
          description: Interval start
        end:
          type: string
          format: date-time
          description: Interval end

    CarCreateRequest:
      type: object
      required:
        - brand
        - model
        - year
        - seats
        - pricePerDay
        - state
        - category
        - transmission
        - fuelType
        - locationId
      properties:
        brand:
          type: string
          description: Brand of the car.
        model:
          type: string
          description: Model of the car.
        year:
          type: integer
          format: int32
          description: Year of manufacture.
        seats:
          type: integer
          format: int32
          description: Number of seats in the car.
        pricePerDay:
          type: number
          format: double
          description: Daily rental price.
        state:
          $ref: '#/components/schemas/CarState'
        category:
          $ref: '#/components/schemas/CarCategory'
        transmission:
          $ref: '#/components/schemas/TransmissionType'
        fuelType:
          $ref: '#/components/schemas/FuelType'
        description:
          type: string
          description: Optional description of the car.
        locationId:
          type: integer
          format: int64
          description: ID of the car's current location.

    CarUpdateRequest:
      type: object
      properties:
        brand:
          type: string
        model:
          type: string
        year:
          type: integer
          format: int32
        seats:
          type: integer
          format: int32
        pricePerDay:
          type: number
          format: double
        state:
          $ref: '#/components/schemas/CarState'
        category:
          $ref: '#/components/schemas/CarCategory'
        transmission:
          $ref: '#/components/schemas/TransmissionType'
        fuelType:
          $ref: '#/components/schemas/FuelType'
        description:
          type: string
        locationId:
          type: integer
          format: int64


    CarFilterOptions:
      type: object
      properties:
        brands:
          type: array
          items:
            type: string
        years:
          type: array
          items:
            type: integer
        priceMin:
          type: number
          format: double
        priceMax:
          type: number
          format: double
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CarCategory'
        seats:
          type: array
          items:
            type: integer
        transmissions:
          type: array
          items:
            $ref: '#/components/schemas/TransmissionType'
        fuelTypes:
          type: array
          items:
            $ref: '#/components/schemas/FuelType'
    PhotoUpdateRequest:
      type: object
      description: Only name and/or isPreview may be updated.
      properties:
        name:
          type: string
        isPreview:
          type: boolean

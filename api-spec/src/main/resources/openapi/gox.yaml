openapi: 3.0.0
info:
  title: GoX API
  version: 1.0.0
  description: API for managing cars in the GoX car rental system.
servers:
  - url: /api
paths:
  /cars:
    get:
      summary: Retrieve a list of cars
      operationId: getCars
      tags:
        - Car
      responses:
        '200':
          description: A list of cars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
  /cars/{carId}:
    get:
      summary: Get a specific car by ID
      operationId: getCarById
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The requested car
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '404':
          description: Car not found
  /cars/{carId}/reviews:
    get:
      summary: Get all reviews for a car
      operationId: getReviewsForCar
      tags:
        - Review
      parameters:
        - name: carId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of reviews for the car
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
  /admin/users:
    get:
      summary: Retrieve all users
      operationId: getUsers
      tags:
        - User
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /admin/cars:
    post:
      summary: Create a new car (admin only)
      operationId: createCar
      tags:
        - Car
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '201':
          description: Car successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
  /admin/reviews/{reviewId}:
    delete:
      summary: Delete a review by admin
      operationId: adminDeleteReview
      tags:
        - Review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Review successfully deleted by admin
  /customer/profile:
    get:
      summary: Get own profile
      operationId: getProfile
      tags:
        - User
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /customer/wishlist/cars/{carId}:
    post:
      summary: Add a car to the current user's Wishlist
      operationId: addCarToWishlist
      tags:
        - User
      parameters:
        - name: carId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Car has been successfully added to the Wishlist.
          content:
            text/plain:
              schema:
                type: string
    delete:
      summary: Remove a car from the current user's Wishlist
      operationId: removeCarFromWishlist
      tags:
        - User
      parameters:
        - name: carId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Car has been successfully removed from your Wishlist.
          content:
            text/plain:
              schema:
                type: string
  /customer/reviews:
    post:
      summary: Create a review by the current user
      operationId: createReview
      tags:
        - Review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreateRequest'
      responses:
        '201':
          description: Review successfully created
          content:
            text/plain:
              schema:
                type: string
    get:
      summary: Get all reviews by the current user
      operationId: getOwnReviews
      tags:
        - Review
      responses:
        '200':
          description: A list of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
  /customer/reviews/{reviewId}:
    put:
      summary: Update a review by the current user
      operationId: updateReview
      tags:
        - Review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewUpdateRequest'
      responses:
        '200':
          description: Review successfully updated
          content:
            text/plain:
              schema:
                type: string
    delete:
      summary: Delete a review by the current user
      operationId: deleteReview
      tags:
        - Review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Review successfully deleted




components:
  schemas:
    Car:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the car.
        brand:
          type: string
          description: Brand of the car.
        model:
          type: string
          description: Model of the car.
        year:
          type: integer
          description: Production year of the car.
        seats:
          type: integer
          description: Number of seats in the car.
        state:
          $ref: '#/components/schemas/CarState'
        pricePerDay:
          type: number
          format: double
          description: Rental price per day.
        description:
          type: string
          description: Optional description of the car.

    CarState:
      type: string
      description: The current state of the car.
      enum:
        - AVAILABLE
        - RENTED
        - UNAVAILABLE
        - IN_TRANSIT
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the user.
        name:
          type: string
          description: Full name of the user.
        email:
          type: string
          format: email
          description: Unique email of the user.
        role:
          $ref: '#/components/schemas/UserRole'
        loyaltyLevel:
          $ref: '#/components/schemas/LoyaltyLevel'
        address:
          type: string
          description: Postal address of the user.
        phone:
          type: string
          description: Phone number of the user.
        wishlist:
          $ref: '#/components/schemas/Wishlist'
    UserShort:
      type: object
      description: A lightweight user model for authentication and security contexts.
      properties:
        email:
          type: string
          format: email
          description: User's email used for login.
        name:
          type: string
          description: Full name of the user.
        role:
          $ref: '#/components/schemas/UserRole'
        address:
          type: string
          description: Postal address of the user.
        phone:
          type: string
          description: Phone number of the user.
    UserRole:
      type: string
      enum:
        - ADMIN
        - CUSTOMER
      description: Role of the user within the system.

    LoyaltyLevel:
      type: string
      enum:
        - STANDARD
        - SILVER
        - GOLD
      description: Loyalty level of the user.
    Wishlist:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique Wishlist ID.
        cars:
          type: array
          items:
            $ref: '#/components/schemas/Car'
      description: User's Wishlist with selected cars.
    Review:
      type: object
      properties:
        id:
          type: integer
        rating:
          type: integer
        comment:
          type: string
        userId:
          type: integer
        userName:
          type: string
          description: Name of the user who wrote the review.
        carId:
          type: integer
        createdAt:
          type: string
          format: date-time
          description: Date and time when the review was created.

    ReviewCreateRequest:
      type: object
      required:
        - rating
        - comment
        - carId
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
        carId:
          type: integer
          format: int64

    ReviewUpdateRequest:
      type: object
      required:
        - rating
        - comment
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string